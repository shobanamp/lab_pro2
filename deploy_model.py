# -*- coding: utf-8 -*-
"""deploy_model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pxIY0HFFwgNUGi-JBKfVIEt-UrH8hhUY
"""

import mlflow
import mlflow.spark
from fastapi import FastAPI
from pydantic import BaseModel, Field
import pandas as pd

from pyspark.sql import SparkSession
from pyspark.sql.functions import udf, col
from pyspark.sql.types import DoubleType
from pyspark.ml.feature import VectorAssembler
from pyspark.ml.linalg import Vectors, VectorUDT

# ---------- Spark ----------
spark = SparkSession.builder.appName("TitanicDeployment").getOrCreate()

# ---------- MLflow ----------
mlflow.set_tracking_uri("http://localhost:5000")
MODEL_NAME = "TitanicBestModel"
MODEL_STAGE = "Production"
model = mlflow.spark.load_model(f"models:/{MODEL_NAME}/{MODEL_STAGE}")

# ---------- FastAPI ----------
app = FastAPI(title="Titanic Survival Prediction API")

class PassengerData(BaseModel):
    Pclass: int = Field(..., example=3)
    Age_imputed: float = Field(..., example=22.0)
    SibSp: int = Field(..., example=1)
    Parch: int = Field(..., example=0)
    Fare_imputed: float = Field(..., example=7.25)
    # One-hot vectors as lists; we'll convert to Spark DenseVector
    SexVec: list[float] = Field(..., example=[1.0, 0.0])
    EmbarkedVec: list[float] = Field(..., example=[0.0, 1.0, 0.0])

# UDFs to convert Python list -> Spark DenseVector
to_vector_udf = udf(lambda xs: Vectors.dense(xs) if xs is not None else None, VectorUDT())

@app.get("/health")
def health():
    return {"status": "ok"}

@app.post("/predict")
def predict(data: PassengerData):
    # pandas -> spark
    pdf = pd.DataFrame([data.dict()])
    sdf = spark.createDataFrame(pdf)

    # Enforce numeric types on scalar columns (avoid strings sneaking in)
    for c, t in [
        ("Pclass", "int"),
        ("Age_imputed", "double"),
        ("SibSp", "int"),
        ("Parch", "int"),
        ("Fare_imputed", "double"),
    ]:
        sdf = sdf.withColumn(c, col(c).cast(t))

    # Convert list columns to VectorUDT
    sdf = sdf.withColumn("SexVec", to_vector_udf(col("SexVec")))
    sdf = sdf.withColumn("EmbarkedVec", to_vector_udf(col("EmbarkedVec")))

    # Assemble exactly like training
    assembler = VectorAssembler(
        inputCols=[
            "Pclass", "Age_imputed", "SibSp", "Parch",
            "Fare_imputed", "SexVec", "EmbarkedVec"
        ],
        outputCol="features"
    )
    sdf = assembler.transform(sdf)

    # Predict
    out_pdf = model.transform(sdf).toPandas()
    prob = float(out_pdf["probability"].iloc[0][1])
    pred = int(out_pdf["prediction"].iloc[0])

    return {"prediction": pred, "survival_probability": prob}